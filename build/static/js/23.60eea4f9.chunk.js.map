{"version":3,"sources":["modUser/Menubar.js","modUser/myAccount/PasswordForm.js","modUser/myAccount/UserForm.js","modUser/myAccount/MyAccount.js"],"names":["Menubar","className","userData","length","map","item","index","activeClassName","to","label","schema","yup","oldPassword","required","min","max","newPassword","confirmPassword","oneOf","PasswordForm","mutateAsync","usePostData","useState","submitting","setSubmitting","toggle","setToggle","passwordType","useForm","resolver","yupResolver","register","handleSubmit","reset","errors","formState","onSubmit","formData","a","path","status","toast","success","response","error","data","message","request","type","placeholder","onClick","PrimaryButton","btnText","Icon","FiArrowRight","btnWidth","disabled","fullName","UserForm","defaultValues","Input","name","errorMessage","MyAccount","useGetData","list","isLoading","isError","Layout","Error","role","process","email"],"mappings":"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","file":"static/js/23.60eea4f9.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { userData } from \"../data/header\";\r\n\r\nconst Menubar = () => {\r\n  return (\r\n    <div className=\"text-darker\">\r\n      {userData.length > 0 &&\r\n        userData.map((item, index) => (\r\n          <div key={index}>\r\n            <NavLink\r\n              className=\"my-2 pr-5 py-1 lg:block\"\r\n              activeClassName=\"text-red-500\"\r\n              to={item.to}\r\n            >\r\n              <span className=\"text-sm font-medium\">{item.label}</span>\r\n            </NavLink>\r\n          </div>\r\n        ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Menubar;\r\n","import React from \"react\";\r\nimport * as yup from \"yup\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport { FiArrowRight, FiEye } from \"react-icons/fi\";\r\nimport PrimaryButton from \"../../components/button/PrimaryButton\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useState } from \"react\";\r\nimport { FaEyeSlash } from \"react-icons/fa\";\r\nimport { usePostData } from \"../../hooks/dataApi\";\r\nimport toast from \"react-hot-toast\";\r\n\r\nconst schema = yup.object({\r\n  oldPassword: yup\r\n    .string()\r\n    .required(\"Old password is required\")\r\n    .min(8, \"Old password must be at least 8 characters\")\r\n    .max(16, \"Old password must be at most 16 characters\"),\r\n  newPassword: yup\r\n    .string()\r\n    .required(\"New password is required\")\r\n    .min(8, \"New password must be at least 8 characters\")\r\n    .max(16, \"New password must be at most 16 characters\"),\r\n  confirmPassword: yup\r\n    .string()\r\n    .required(\"Confirm password is required\")\r\n    .oneOf([yup.ref(\"newPassword\"), null], \"Passwords does n't match\"),\r\n});\r\n\r\nconst PasswordForm = () => {\r\n  const { mutateAsync } = usePostData();\r\n  const [submitting, setSubmitting] = useState(false);\r\n  const [toggle, setToggle] = useState(false);\r\n  const passwordType = toggle ? \"text\" : \"password\";\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    reset,\r\n    formState: { errors },\r\n  } = useForm({\r\n    resolver: yupResolver(schema),\r\n  });\r\n\r\n  const { oldPassword, newPassword, confirmPassword } = errors;\r\n\r\n  const onSubmit = async (formData) => {\r\n    try {\r\n      const { status } = await mutateAsync({\r\n        path: \"/user/update-password\",\r\n        formData: formData,\r\n      });\r\n      if (status === 204) {\r\n        toast.success(\"Password change successfully.\");\r\n        reset();\r\n      }\r\n    } catch (error) {\r\n      if (error.response) {\r\n        toast.error(\"Response : \" + error.response.data.message);\r\n      } else if (error.request) {\r\n        toast.error(\"Request : \" + error.message);\r\n      } else {\r\n        toast.error(\"Error :\", error.message);\r\n      }\r\n    } finally {\r\n      setSubmitting(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form className=\"my-7\" onSubmit={handleSubmit(onSubmit)}>\r\n      <h5 className=\"mb-2 font-medium font-lg\">Password Change</h5>\r\n      <div className=\"form-col\">\r\n        <div className=\"grid md:grid-cols-2\">\r\n          <div className=\"form-row\">\r\n            <input\r\n              type={passwordType}\r\n              className=\"form-control\"\r\n              placeholder=\"Old Password *\"\r\n              {...register(\"oldPassword\")}\r\n            />\r\n            <p className=\"text-red-400 text-sm\">{oldPassword?.message}</p>\r\n            <span\r\n              className=\"px-2 py-2 absolute top-0.5 right-0 cursor-pointer\"\r\n              onClick={() => setToggle(!toggle)}\r\n            >\r\n              {toggle ? <FiEye /> : <FaEyeSlash />}\r\n            </span>\r\n          </div>\r\n        </div>\r\n        <div className=\"grid md:grid-cols-2\">\r\n          <div className=\"form-row\">\r\n            <input\r\n              type={passwordType}\r\n              className=\"form-control\"\r\n              placeholder=\"New Password *\"\r\n              {...register(\"newPassword\")}\r\n            />\r\n            <p className=\"text-red-400 text-sm\">{newPassword?.message}</p>\r\n          </div>\r\n        </div>\r\n        <div className=\"grid md:grid-cols-2\">\r\n          <div className=\"form-row\">\r\n            <input\r\n              type={passwordType}\r\n              className=\"form-control\"\r\n              placeholder=\"Confirm Password *\"\r\n              {...register(\"confirmPassword\")}\r\n            />\r\n            <p className=\"text-red-400 text-sm\">{confirmPassword?.message}</p>\r\n          </div>\r\n        </div>\r\n        <PrimaryButton\r\n          btnText=\"UPDATE\"\r\n          Icon={FiArrowRight}\r\n          type=\"submit\"\r\n          btnWidth=\"w-24\"\r\n          disabled={submitting}\r\n        />\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default PasswordForm;\r\n","import React, { useState } from \"react\";\r\nimport { FiArrowRight } from \"react-icons/fi\";\r\nimport * as yup from \"yup\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport Input from \"../../components/Input\";\r\nimport PrimaryButton from \"../../components/button/PrimaryButton\";\r\nimport { usePostData } from \"../../hooks/dataApi\";\r\nimport toast from \"react-hot-toast\";\r\n\r\nconst schema = yup.object({\r\n  fullName: yup.string().required(\"Full Name is required\"),\r\n});\r\n\r\nconst UserForm = ({ defaultValues }) => {\r\n  const { mutateAsync } = usePostData();\r\n  const [submitting, setSubmitting] = useState(false);\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    reset,\r\n    formState: { errors },\r\n  } = useForm({\r\n    defaultValues: defaultValues,\r\n    resolver: yupResolver(schema),\r\n  });\r\n\r\n  const { fullName } = errors;\r\n\r\n  const onSubmit = async (formData) => {\r\n    setSubmitting(true);\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit(onSubmit)}>\r\n      <h5 className=\"mb-2 font-medium font-lg\">User Information</h5>\r\n      <div className=\"form-col\">\r\n        <div className=\"grid md:grid-cols-2\">\r\n          <Input\r\n            name=\"fullName\"\r\n            type=\"text\"\r\n            placeholder=\"Full Name *\"\r\n            register={register}\r\n            errorMessage={fullName?.message}\r\n          />\r\n        </div>\r\n        <div className=\"grid md:grid-cols-2\">\r\n          <Input\r\n            name=\"email\"\r\n            type=\"email\"\r\n            placeholder=\"Email address *\"\r\n            register={register}\r\n            disabled={true}\r\n          />\r\n        </div>\r\n        <PrimaryButton\r\n          btnText=\"SAVE\"\r\n          Icon={FiArrowRight}\r\n          type=\"submit\"\r\n          btnWidth=\"w-24\"\r\n          // disabled={submitting}\r\n        />\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default UserForm;\r\n","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport Error from \"../../components/Error\";\r\nimport Layout from \"../../components/layout/Layout\";\r\nimport { HashLoading } from \"../../components/Loading\";\r\nimport { useGetData } from \"../../hooks/dataApi\";\r\nimport Menubar from \"../Menubar\";\r\nimport PasswordForm from \"./PasswordForm\";\r\nimport UserForm from \"./UserForm\";\r\n\r\nconst MyAccount = () => {\r\n  const {\r\n    data: list,\r\n    isLoading,\r\n    isError,\r\n    error,\r\n  } = useGetData(\"userInfo\", \"/userinfo\");\r\n\r\n  if (isLoading)\r\n    return (\r\n      <Layout>\r\n        <HashLoading />\r\n      </Layout>\r\n    );\r\n\r\n  if (isError)\r\n    return (\r\n      <Layout>\r\n        <Error message={error.message} />\r\n      </Layout>\r\n    );\r\n\r\n  const role = list.data.role === process.env.REACT_APP_ROLE;\r\n\r\n  return (\r\n    <Layout>\r\n      <div className=\"grid gap-4 lg:grid-cols-6\">\r\n        {role ? (\r\n          <NavLink\r\n            className=\"my-2 pr-5 py-1 lg:block\"\r\n            activeClassName=\"text-red-500\"\r\n            to=\"/user/my-account\"\r\n          >\r\n            <span className=\"text-sm font-medium\">My Profile</span>\r\n          </NavLink>\r\n        ) : (\r\n          <Menubar />\r\n        )}\r\n        {/*  */}\r\n        <div className=\"card w-full max-w-screen-xl lg:col-span-5\">\r\n          <div className=\"flex justify-between px-0 pb-2\">\r\n            <h1 className=\"text-2xl font-medium\">My Profile</h1>\r\n          </div>\r\n          <UserForm\r\n            defaultValues={{\r\n              fullName: list.data.fullName,\r\n              email: list.data.email,\r\n            }}\r\n          />\r\n          <PasswordForm />\r\n        </div>\r\n      </div>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default MyAccount;\r\n"],"sourceRoot":""}